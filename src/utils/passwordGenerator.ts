/**
 * üîë Sistema de Gera√ß√£o de Senhas para MikroTik
 * 
 * Utilit√°rio para gera√ß√£o em lote de usu√°rios e senhas para hotspot MikroTik
 * Gera c√≥digos de 5 d√≠gitos num√©ricos onde usu√°rio = senha
 */

export interface PasswordGenerationConfig {
  quantity: number
  profile: string
  prefix?: string
  suffix?: string
}

export interface GeneratedUser {
  username: string
  password: string
  profile: string
  comment?: string
}

export interface GenerationResult {
  users: GeneratedUser[]
  total: number
  errors: string[]
  summary: {
    generated: number
    failed: number
    duplicates: number
  }
}

/**
 * Gera um c√≥digo num√©rico aleat√≥rio de 5 d√≠gitos
 * @returns string com 5 d√≠gitos (ex: "12345")
 */
export const generateFiveDigitCode = (): string => {
  // Gera n√∫mero entre 10000 e 99999 para garantir 5 d√≠gitos
  const min = 10000
  const max = 99999
  const code = Math.floor(Math.random() * (max - min + 1)) + min
  return code.toString()
}

/**
 * Gera m√∫ltiplos c√≥digos √∫nicos
 * @param quantity Quantidade de c√≥digos a gerar
 * @param existingCodes C√≥digos j√° existentes para evitar duplicatas
 * @returns Array de c√≥digos √∫nicos
 */
export const generateUniqueCodes = (
  quantity: number, 
  existingCodes: Set<string> = new Set()
): string[] => {
  const codes = new Set<string>(existingCodes)
  const newCodes: string[] = []
  
  let attempts = 0
  const maxAttempts = quantity * 10 // Evita loop infinito
  
  while (newCodes.length < quantity && attempts < maxAttempts) {
    const code = generateFiveDigitCode()
    
    if (!codes.has(code)) {
      codes.add(code)
      newCodes.push(code)
    }
    
    attempts++
  }
  
  return newCodes
}

/**
 * Valida a configura√ß√£o de gera√ß√£o
 * @param config Configura√ß√£o da gera√ß√£o
 * @returns Array de erros (vazio se v√°lido)
 */
export const validateGenerationConfig = (config: PasswordGenerationConfig): string[] => {
  const errors: string[] = []
  
  // Validar quantidade
  if (!config.quantity || config.quantity < 1) {
    errors.push('Quantidade deve ser maior que 0')
  }
  
  if (config.quantity > 500) {
    errors.push('Quantidade m√°xima √© 500 usu√°rios por vez')
  }
  
  // Validar perfil
  if (!config.profile || config.profile.trim() === '') {
    errors.push('Perfil √© obrigat√≥rio')
  }
  
  // Validar formato do perfil
  if (config.profile && config.profile.includes(' ')) {
    errors.push('Nome do perfil n√£o pode conter espa√ßos')
  }
  
  return errors
}

/**
 * Gera lista de usu√°rios com senhas
 * @param config Configura√ß√£o da gera√ß√£o
 * @param existingUsernames Nomes de usu√°rios j√° existentes
 * @returns Resultado da gera√ß√£o
 */
export const generatePasswordBatch = (
  config: PasswordGenerationConfig,
  existingUsernames: string[] = []
): GenerationResult => {
  const result: GenerationResult = {
    users: [],
    total: config.quantity,
    errors: [],
    summary: {
      generated: 0,
      failed: 0,
      duplicates: 0
    }
  }
  
  // Validar configura√ß√£o
  const configErrors = validateGenerationConfig(config)
  if (configErrors.length > 0) {
    result.errors = configErrors
    result.summary.failed = config.quantity
    return result
  }
  
  try {
    // Criar Set com usu√°rios existentes para verifica√ß√£o r√°pida
    const existingSet = new Set(existingUsernames.map(name => name.toLowerCase()))
    
    // Gerar c√≥digos √∫nicos
    const codes = generateUniqueCodes(config.quantity, new Set(existingUsernames))
    
    if (codes.length < config.quantity) {
      result.errors.push(`S√≥ foi poss√≠vel gerar ${codes.length} c√≥digos √∫nicos de ${config.quantity} solicitados`)
    }
    
    // Criar usu√°rios
    codes.forEach((code, index) => {
      try {
        const username = `${config.prefix || ''}${code}${config.suffix || ''}`
        const password = code // Usu√°rio = senha
        
        // Verificar se j√° existe
        if (existingSet.has(username.toLowerCase())) {
          result.summary.duplicates++
          result.errors.push(`Usu√°rio ${username} j√° existe`)
          return
        }
        
        // Criar usu√°rio
        const user: GeneratedUser = {
          username,
          password,
          profile: config.profile,
          comment: `Gerado automaticamente - Lote ${new Date().toLocaleDateString('pt-BR')} - ${index + 1}/${config.quantity}`
        }
        
        result.users.push(user)
        result.summary.generated++
        
      } catch (error) {
        result.summary.failed++
        result.errors.push(`Erro ao gerar usu√°rio ${index + 1}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`)
      }
    })
    
  } catch (error) {
    result.errors.push(`Erro geral na gera√ß√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`)
    result.summary.failed = config.quantity
  }
  
  return result
}

/**
 * Formata o resultado da gera√ß√£o para exibi√ß√£o
 * @param result Resultado da gera√ß√£o
 * @returns String formatada com resumo
 */
export const formatGenerationSummary = (result: GenerationResult): string => {
  const { summary } = result
  
  let text = `‚úÖ ${summary.generated} usu√°rios gerados com sucesso`
  
  if (summary.failed > 0) {
    text += `\n‚ùå ${summary.failed} falharam`
  }
  
  if (summary.duplicates > 0) {
    text += `\n‚ö†Ô∏è ${summary.duplicates} duplicatas encontradas`
  }
  
  if (result.errors.length > 0) {
    text += `\n\nüìã Detalhes dos erros:\n${result.errors.slice(0, 5).join('\n')}`
    
    if (result.errors.length > 5) {
      text += `\n... e mais ${result.errors.length - 5} erros`
    }
  }
  
  return text
}

/**
 * Converte usu√°rios gerados para formato de envio para API
 * @param users Lista de usu√°rios gerados
 * @param mikrotikParams Par√¢metros adicionais do MikroTik
 * @returns Array formatado para API
 */
export const formatUsersForAPI = (
  users: GeneratedUser[],
  mikrotikParams: any = {}
): Array<{
  name: string
  password: string
  profile: string
  comment?: string
  disabled?: boolean
}> => {
  return users.map(user => ({
    name: user.username,
    password: user.password,
    profile: user.profile,
    comment: user.comment,
    disabled: false,
    ...mikrotikParams
  }))
}

/**
 * Estima o tempo de cria√ß√£o baseado na quantidade
 * @param quantity Quantidade de usu√°rios
 * @returns Tempo estimado em segundos
 */
export const estimateCreationTime = (quantity: number): number => {
  // Estima ~200ms por usu√°rio (incluindo rede + processamento)
  const timePerUser = 0.2
  const baseTime = 2 // Tempo base de conex√£o
  
  return Math.ceil(baseTime + (quantity * timePerUser))
}

/**
 * Formata tempo em segundos para string leg√≠vel
 * @param seconds Tempo em segundos
 * @returns String formatada (ex: "2m 30s")
 */
export const formatEstimatedTime = (seconds: number): string => {
  if (seconds < 60) {
    return `${seconds}s`
  }
  
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  
  if (remainingSeconds === 0) {
    return `${minutes}m`
  }
  
  return `${minutes}m ${remainingSeconds}s`
}

/**
 * Gera dados de exemplo para preview
 * @param profile Nome do perfil
 * @param quantity Quantidade de exemplos (m√°ximo 5)
 * @returns Array com exemplos de usu√°rios
 */
export const generatePreviewData = (profile: string, quantity: number = 3): GeneratedUser[] => {
  const previewQuantity = Math.min(quantity, 5)
  const codes = generateUniqueCodes(previewQuantity)
  
  return codes.map((code, index) => ({
    username: code,
    password: code,
    profile,
    comment: `Exemplo ${index + 1}`
  }))
}

// Constantes √∫teis
export const PASSWORD_GENERATION_LIMITS = {
  MIN_QUANTITY: 1,
  MAX_QUANTITY: 500,
  CODE_LENGTH: 5,
  MAX_ATTEMPTS_MULTIPLIER: 10
} as const

export const PASSWORD_GENERATION_MESSAGES = {
  SUCCESS: 'Usu√°rios gerados com sucesso!',
  PARTIAL_SUCCESS: 'Alguns usu√°rios foram gerados com problemas',
  FAILED: 'Falha na gera√ß√£o de usu√°rios',
  VALIDATION_ERROR: 'Erro de valida√ß√£o nos dados fornecidos',
  NETWORK_ERROR: 'Erro de conex√£o com o servidor',
  MIKROTIK_ERROR: 'Erro na conex√£o com o MikroTik'
} as const